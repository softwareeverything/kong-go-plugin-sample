package main

import (
	"bytes"
	"compress/gzip"
	"io/ioutil"
	"strings"

	"github.com/Kong/go-pdk"
	xj "github.com/basgys/goxml2json"
)

type Config struct {
	Apikey string
}

func New() interface{} {
	return &Config{}
}

func (conf Config) Response(kong *pdk.PDK) {
	/*
		kong.Log.Alert("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		headers, err := kong.Response.GetHeaders(1000)

		if err != nil {
			kong.Log.Err(err.Error())
			return
		}
	*/
	kong.Log.Alert("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
	contentType, err := kong.Response.GetHeader("Content-Type")

	if err != nil {
		kong.Log.Err(err.Error())
		return
	}
	kong.Log.Alert("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
	if !strings.Contains(strings.ToLower(contentType), "application/xml") {
		kong.Log.Err("Content-Type does not contain application/xml!")
		return
	}

	kong.Log.Alert("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444")
	rawBody, err := kong.ServiceResponse.GetRawBody()
	kong.Log.Alert(rawBody)
	if err != nil {
		kong.Log.Err(err.Error())
		return
	}

	kong.Log.Alert("4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|4.1|")
	contentEncoding, err := kong.Response.GetHeader("Content-Encoding")

	if err != nil {
		kong.Log.Err(err.Error())
		return
	}

	kong.Log.Alert("4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|4.2|")
	if strings.Contains(strings.ToLower(contentEncoding), "gzip") {
		kong.Log.Alert("4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|4.3|")
		gzipBody, err := gzip.NewReader(bytes.NewBuffer([]byte(rawBody)))

		if err != nil {
			kong.Log.Err(err.Error())
			return
		}
		kong.Log.Alert(gzipBody)
		defer gzipBody.Close()

		kong.Log.Alert("4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|4.4|")
		output, err := ioutil.ReadAll(gzipBody)
		if err != nil {
			kong.Log.Err(err.Error())
			return
		}

		rawBody = string(output)
		kong.Log.Alert(rawBody)

		kong.Log.Alert("4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|4.5|")
	}

	kong.Log.Alert("55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555")
	xml := strings.NewReader(rawBody)

	json, err := xj.Convert(xml)
	if err != nil {
		kong.Log.Err(err.Error())
		return
	}
	kong.Log.Alert("66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666")

	//headers["Content-Type"] = "application/json"

	/*
		headers, err = kong.Response.GetHeaders(1000)

		if err != nil {
			kong.Log.Err(err.Error())
			return
		}
	*/

	kong.Log.Alert("77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777")
	kong.Log.Alert(json.String())
	kong.Log.Alert("88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888")
	// kong.Log.Alert(headers["Content-Type"])
	x := make(map[string][]string)
	x["Content-Type"] = append(x["Content-Type"], "application/json")
	kong.Response.Exit(200, json.String(), x)

	kong.Log.Alert("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")
}
